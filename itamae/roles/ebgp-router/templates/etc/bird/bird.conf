# vim: ft=bird nofoldenable

router id <%= node[:ebgp_router][:id] %>;
log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
debug protocols {states, interfaces, events};
debug channels {states, interfaces, events};
graceful restart wait 15;

## const ##

define AS_SELF = <%= node[:ebgp_router][:as] %>;

define C_DC_KSK = 10001;
define C_RECV_AO = 12001;

# route types
define C_ROUTE_OWNED = 11001; # our prefixes
define C_ROUTE_TRANSIT = 11010; # never export to other transit and peer
define C_ROUTE_CUSTOMER = 11011;
define C_ROUTE_PEER = 11012;
define C_ROUTE_DEFAULT = 11013; # never export to any peers (by default)

# control (internal)
define C_CTL_ASSUME_BGP = 13001; /* Forcefully consider a route is exportable to BGP */

define RT_C_DC = C_DC_KSK;
define RT_C_ID = C_RECV_AO;

# routing tables
ipv4 table t4_kernel;
ipv4 table t4_bgp;
ipv4 table t4_igp;
ipv4 table t4_mgmt;

ipv6 table t6_kernel;
ipv6 table t6_bgp;
ipv6 table t6_igp;
ipv6 table t6_mgmt;

## Functions ##

function ipv4_is_private()
{
  return net ~ [ 169.254.0.0/16+, 172.16.0.0/12+, 100.64.0.0/10+,
         192.168.0.0/16+, 10.0.0.0/8+,
         127.0.0.0/8+, 224.0.0.0/3+ ];
}

function ipv4_is_global()
{
  return !ipv4_is_private();
}

function ipv4_is_illegal_route()
{
  return net ~ [ 169.254.0.0/16+, 172.16.0.0/12+, 100.64.0.0/10+,
         192.168.0.0/16+, 10.0.0.0/8+,
         127.0.0.0/8+, 224.0.0.0/3+, 0.0.0.0/0{0,7} ];
}

function ipv6_is_illegal_route()
{
    return net ~ [ 3ffe::/16+, ::/8+, fe00::/8+, ::/128-, ::/0{0,15} ];
}

function ip_is_illegal_route() {
  return ipv4_is_illegal_route() || ipv6_is_illegal_route();
}

function delete_private_asn_from_path() {
  bgp_path.delete([64512..65534, 4200000000..4294967294]);
}

function filter_accept_default_route() {
  if ((AS_SELF, C_ROUTE_DEFAULT) ~ bgp_community) then accept;
}

## Protocols

protocol device device1
{
}

protocol direct direct1
{
    ipv4 {
      table t4_igp;
    };
    ipv6 {
      table t6_igp;
    };
}

protocol kernel kernel_default4
{
  kernel table 254;

  learn off;
  persist off;
  graceful restart on;
  scan time 100;
  netlink rx buffer 80000000;

  ipv4 {
    preference 10;
    table t4_kernel;
    import none;
    export all;
  };
}

protocol kernel kernel_default6
{
  kernel table 254;

  learn off;
  persist off;
  graceful restart on;
  scan time 100;
  netlink rx buffer 80000000;

  ipv6 {
    preference 10;
    table t6_kernel;
    import none;
    export filter {
      if ( net ~ [ 2001:f74:9800:400::eb96/128 ]) then accept;
      /* Scope=link does not work for IPv6 interface address! */
      <% if node[:ebgp_router][:local][:v6] %>krt_prefsrc = <%= node[:ebgp_router][:local][:v6] %>;<% end %>
      accept;
    };
  };
}

protocol static static_all4
{
  ipv4 {
    preference 200;
    table t4_kernel;
    import all;
    export none;
  };
}

protocol static static_all6
{
  ipv6 {
    preference 200;
    table t6_kernel;
    import all;
    export none;
  };
}

# Advertise our prefixes to peers
protocol static static_bgp4
{
  ipv4 {
    preference 400;
    table t4_bgp;
    import filter
    {
      bgp_community.add((AS_SELF, RT_C_DC));
      bgp_community.add((AS_SELF, RT_C_ID));
      bgp_community.add((AS_SELF, C_ROUTE_OWNED));
      accept;
    };
    export none;
  };
}
protocol static static_bgp6
{
  ipv6 {
    preference 400;
    table t6_bgp;
    import filter
    {
      bgp_community.add((AS_SELF, RT_C_DC));
      bgp_community.add((AS_SELF, RT_C_ID));
      bgp_community.add((AS_SELF, C_ROUTE_OWNED));
      accept;
    };
    export none;
  };
}

# Originate default
protocol static static_default4
{
  ipv4 {
    preference 50;
    table t4_bgp;
    import filter
    {
      accept;
    };
    export none;
  };

  route 0.0.0.0/0 blackhole;
}
protocol static static_default6
{
  ipv6 {
    preference 50;
    table t6_bgp;
    import filter
    {
      accept;
    };
    export none;
  };

  route ::/0 blackhole;
}

## Pipes ##

protocol pipe pipe_bgp2kernel4
{
  table t4_bgp;
  peer table t4_kernel;
  /* <- */
  import none;
# ->
  export filter
  {
    if (proto = "static_bgp4") then accept;
    if (((AS_SELF, C_ROUTE_DEFAULT) ~ bgp_community)) then reject;
    if (source = RTS_BGP || (AS_SELF, C_CTL_ASSUME_BGP) ~ bgp_community) then accept;
    reject;
  };
}

protocol pipe pipe_bgp2kernel6
{
  table t6_bgp;
  peer table t6_kernel;
  /* <- */
  import none;
# ->
  export filter
  {
    if (proto = "static_bgp6") then accept;
    if (((AS_SELF, C_ROUTE_DEFAULT) ~ bgp_community)) then reject;
    if (source = RTS_BGP || (AS_SELF, C_CTL_ASSUME_BGP) ~ bgp_community) then accept;
    reject;
  };
}

protocol pipe pipe_igp2kernel4
{
  table t4_igp;
  peer table t4_kernel;
  import none;
  export filter
  {
    if (net = 0.0.0.0/0) then reject;
    accept;
  };
}

protocol pipe pipe_igp2kernel6
{
  table t6_igp;
  peer table t6_kernel;
  import none;
  export filter
  {
    if (net = ::/0) then reject;
    accept;
  };
}

protocol pipe pipe_igp2bgp4
{
  table t4_igp;
  peer table t4_bgp;
  import none;
  export filter
  {
    if (net = 0.0.0.0/0) then reject;
    accept;
  };
}

protocol pipe pipe_igp2bgp6
{
  table t6_igp;
  peer table t6_bgp;
  import none;
  export filter
  {
    if (net = ::/0) then reject;
    accept;
  };
}

include "/etc/bird/bird.conf.d/*";
